{"version":3,"sources":["components/Helpers.ts","components/FileSelector.tsx","components/TrackDetails.tsx","components/Retailers.tsx","components/Locations.tsx","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toAmpSheet","rowObj","Artist","ContentType","DeliveryMethod","Distributor","ISRC","Label","PeriodFrom","PeriodTo","Quantity","ReleaseTitle","Revenue","SuitebeatsComp","Territory","TrackTitle","UPC","getMultiByKeyProp","key","data","byKeyProp","forEach","row","push","FileSelector","onLoad","React","useState","fileName","setFileName","Button","variant","component","type","onChange","e","file","target","files","name","reader","FileReader","onload","result","onerror","ex","console","log","readAsBinaryString","hidden","TrackDetails","sheet","byIsrc","rows","Object","keys","map","isrc","i","id","track","col1","col2","col3","style","height","width","columns","field","headerName","Retailers","byRetailer","getByRetailer","categories","retailer","total","reduce","acc","options","chart","plotOptions","bar","borderRadius","horizontal","dataLabels","enabled","xaxis","series","Locations","byLocation","getByLocation","locations","labels","responsive","breakpoint","legend","position","Home","setSheet","padding","workbook","XLSX","sheetName","SheetNames","workSheet","Sheets","sheetRange","decode_range","sheet_to_json","range","s","c","r","loadAMPsuite","length","border","App","className","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.8f8275f7.chunk.js","sourcesContent":["import * as XLSX from 'xlsx'\nimport { AmpSheetRow } from '../Types'\n\ninterface AmpSheetRaw {\n  Artist: string\n  'Content Type': string\n  'Delivery Method': string\n  Distributor: string\n  ISRC: string\n  Label: string\n  'Period From': string\n  'Period To': string\n  Quantity: string\n  'Release Title': string\n  Revenue: number\n  'Suitebeats Comp.': string\n  'Territory': string\n  'Track Title': string\n  UPC: string\n}\n\nfunction toAmpSheet(rowObj: AmpSheetRaw) {\n  return {\n    Artist: rowObj.Artist,\n    ContentType: rowObj['Content Type'],\n    DeliveryMethod: rowObj['Delivery Method'],\n    Distributor: rowObj.Distributor,\n    ISRC: rowObj.ISRC,\n    Label: rowObj.Label,\n    PeriodFrom: rowObj['Period From'],\n    PeriodTo: rowObj['Period To'],\n    Quantity: rowObj.Quantity,\n    ReleaseTitle: rowObj['Release Title'],\n    Revenue: rowObj.Revenue,\n    SuitebeatsComp: rowObj['Suitebeats Comp.'],\n    Territory: rowObj.Territory,\n    TrackTitle: rowObj['Track Title'],\n    UPC: rowObj.UPC\n  }\n}\n\nexport function loadAMPsuite(data: any): AmpSheetRow[] {\n  const workbook = XLSX.read(data, {\n    type: 'binary'\n  });\n  const sheetName = workbook.SheetNames[0]\n  const workSheet = workbook.Sheets[sheetName]\n  const sheetRange = XLSX.utils.decode_range(workSheet['!ref']!)\n  const asJson = XLSX.utils.sheet_to_json<AmpSheetRaw>(workSheet, { range: { s: { c:0, r:10 }, e: sheetRange.e}})\n  return asJson.map(toAmpSheet)\n}\n\nexport function getByIsrc(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('ISRC', data)\n}\n\nexport function getByTerritory(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('Territory', data)\n}\n\nexport function getByArtist(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('Artist', data)\n}\n\nexport function getByRetailer(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('Distributor', data)\n}\n\nexport function getByLocation(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('Territory', data)\n}\n\nexport function getMultiByKeyProp(key: keyof AmpSheetRow, data: AmpSheetRow[]) {\n  const byKeyProp: {[key: string]: AmpSheetRow[]} = {}\n  data.forEach((row) => {\n    !byKeyProp[row[key]] && (byKeyProp[row[key]] = [])\n    byKeyProp[row[key]].push(row)\n  })\n  return byKeyProp\n}\n\nexport function consolidateRvByDate(data: AmpSheetRow[]) {\n  const byDate: { [key: string]: number } = {}\n  data?.forEach((d) => {\n    !byDate[d.PeriodTo] && (byDate[d.PeriodTo] = 0)\n    byDate[d.PeriodTo] += d.Revenue\n  })\n  return byDate\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\n\nexport default function FileSelector({ onLoad }: { onLoad: (data: any) => void }) {\n  const [fileName, setFileName] = React.useState('')\n\n  function filesSelected(e: any) {\n    const file = e.target.files[0]\n    setFileName(file.name)\n    const reader = new FileReader();\n    reader.onload = function(e) {\n      const data = e.target?.result;\n      onLoad(data)\n    }\n    reader.onerror = function(ex) {\n      console.log(ex);\n    };\n    reader.readAsBinaryString(file);\n  }\n\n  return <Button\n    variant=\"contained\"\n    component=\"label\"\n  >\n    {fileName || 'Upload File'}\n    <input\n      type=\"file\"\n      onChange={filesSelected}\n      hidden\n    />\n  </Button>\n}\n","import { DataGrid, GridColDef, GridRowData, GridRowsProp } from '@material-ui/data-grid'\nimport { AmpSheetRow } from '../Types'\nimport { getByIsrc } from './Helpers'\n\nexport default function TrackDetails({ sheet }: { sheet: AmpSheetRow[]}) {\n  const cols: GridColDef[] = [\n    { field: 'col1', headerName: 'Title', width: 150 },\n    { field: 'col2', headerName: 'Quantity', width: 150 },\n    { field: 'col3', headerName: 'Revenue', width: 150 }\n  ]\n\n  const byIsrc = getByIsrc(sheet)\n  const rows: GridRowsProp = Object.keys(byIsrc).map((isrc, i) => {\n    const data: GridRowData = { id: i }\n    byIsrc[isrc].forEach((track) => {\n      data.col1 = track.TrackTitle\n      !data.col2 && (data.col2 = 0)\n      data.col2 += track.Quantity\n      !data.col3 && (data.col3 = 0)\n      data.col3 += track.Revenue\n    })\n    return data\n  })\n\n  return <div style={{ height: 300, width: '100%' }}>\n    <DataGrid rows={rows} columns={cols}></DataGrid>\n  </div>\n}\n","import ReactApexChart from 'react-apexcharts'\nimport { AmpSheetRow } from '../Types'\nimport { getByRetailer } from './Helpers'\nimport { ApexOptions } from 'apexcharts'\n\nexport default function Retailers({ sheet }: { sheet: AmpSheetRow[] }) {\n  const byRetailer = getByRetailer(sheet)\n  const categories: string[] = []\n  const data: number[] = []\n  Object.keys(byRetailer).forEach((retailer) => {\n    categories.push(retailer)\n    const total = byRetailer[retailer].reduce((acc, track) => {\n      return acc + track.Revenue\n    }, 0)\n    data.push(total)\n  })\n\n  const options: ApexOptions = {\n    chart: {\n      type: 'bar',\n      height: 350\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 4,\n        horizontal: true,\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    xaxis: {\n      categories,\n    }\n  }\n  const series = [{ data }]\n  return <div>\n    <ReactApexChart options={options} series={series} type=\"bar\" height={350} />\n  </div>\n}\n","import { AmpSheetRow } from '../Types'\nimport { getByLocation } from './Helpers'\nimport { ApexOptions } from 'apexcharts'\nimport ReactApexChart from 'react-apexcharts'\n\nexport default function Locations({ sheet }: { sheet: AmpSheetRow[] }) {\n  const byLocation = getByLocation(sheet)\n  const locations: string[] = []\n  const data: number[] = []\n  Object.keys(byLocation).forEach((retailer) => {\n    locations.push(retailer)\n    const total = byLocation[retailer].reduce((acc, track) => {\n      return acc + track.Revenue\n    }, 0)\n    data.push(total)\n  })\n\n  const options: ApexOptions = {\n    chart: {\n      type: 'donut',\n    },\n    labels: locations,\n    responsive: [{\n      breakpoint: 480,\n      options: {\n        chart: {\n          width: 200\n        },\n        legend: {\n          position: 'bottom'\n        }\n      }\n    }]\n  }\n\n  return <div>\n    <ReactApexChart options={options} series={data} type=\"donut\" height={350} />\n  </div>\n}\n","import React from 'react';\nimport { AmpSheetRow } from '../Types'\nimport { loadAMPsuite } from './Helpers'\nimport FileSelector from './FileSelector'\nimport TrackDetails from './TrackDetails'\nimport Retailers from './Retailers'\nimport Locations from './Locations'\n\nexport default function Home() {\n  const [sheet, setSheet] = React.useState<AmpSheetRow[]>([])\n\n  function fileSelected(data: any) {\n    const sheet = loadAMPsuite(data)\n    setSheet(sheet)\n  }\n\n  return <div style={{ padding: 25 }}>\n    <div style={{ padding: 25 }}>\n      <FileSelector onLoad={fileSelected} />\n    </div>\n    {!!sheet.length && <div style={{ padding: 25, border: 'solid 1px' }}>\n      Tracks\n      <div style={{ padding: 25 }}>\n        <TrackDetails sheet={sheet} />\n      </div>\n      Retailers\n      <div style={{ padding: 25 }}>\n        <Retailers sheet={sheet} />\n      </div>\n      Locations\n      <div style={{ padding: 25 }}>\n        <Locations sheet={sheet} />\n      </div>\n    </div>\n    }\n  </div>\n}\n","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}