{"version":3,"sources":["components/Helpers.ts","components/FileSelector.tsx","components/TrackDetails.tsx","components/Filters.tsx","components/Retailers.tsx","components/Locations.tsx","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toAmpSheet","rowObj","Artist","ContentType","DeliveryMethod","Distributor","ISRC","Label","PeriodFrom","PeriodTo","Quantity","parseInt","ReleaseTitle","Revenue","SuitebeatsComp","Territory","TrackTitle","UPC","getMultiByKeyProp","key","data","byKeyProp","forEach","row","push","FileSelector","onLoad","loadFiles","toLoad","loaded","length","reader","FileReader","onload","e","target","result","name","slice","onerror","ex","console","log","readAsBinaryString","Button","variant","component","type","onChange","files","i","hidden","multiple","TrackDetails","sheet","byIsrc","rows","Object","keys","map","isrc","id","track","title","quantity","revenue","artist","style","height","width","columns","field","headerName","ALL","SERIES_TYPES","Filters","onFiltersChanged","React","useState","currentArtist","setCurrentArtist","currentSeries","setCurrentSeries","allArtists","setAllArtists","useEffect","artists","includes","streamOrRevenue","Box","Select","value","padding","margin","MenuItem","a","series","Retailers","byRetailer","setByRetailer","setSeries","currentCategories","setCategories","availableSeries","setAvailableSeries","selectedSeries","setSelectedSeries","categories","retailer","streams","revTotal","streamTotal","options","chart","plotOptions","bar","borderRadius","horizontal","dataLabels","enabled","xaxis","Locations","byLocation","setByLocation","locations","setLocations","setData","getByLocation","labels","responsive","breakpoint","legend","position","Math","floor","random","Home","setSheet","values","sheetData","workbook","XLSX","sheetName","SheetNames","workSheet","Sheets","sheetRange","decode_range","testJson","sheet_to_csv","RS","startIndex","split","some","index","filter","h","sheet_to_json","range","s","c","r","loadAMPsuite","border","App","className","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.b04801e1.chunk.js","sourcesContent":["import * as XLSX from 'xlsx'\nimport { AmpSheetRow } from '../Types'\n\ninterface AmpSheetRaw {\n  Artist: string\n  'Content Type': string\n  'Delivery Method': string\n  Distributor: string\n  ISRC: string\n  Label: string\n  'Period From': string\n  'Period To': string\n  Quantity: string\n  'Release Title': string\n  Revenue: number\n  'Suitebeats Comp.': string\n  'Territory': string\n  'Track Title': string\n  UPC: string\n}\n\nfunction toAmpSheet(rowObj: AmpSheetRaw) {\n  return {\n    Artist: rowObj.Artist,\n    ContentType: rowObj['Content Type'],\n    DeliveryMethod: rowObj['Delivery Method'],\n    Distributor: rowObj.Distributor,\n    ISRC: rowObj.ISRC,\n    Label: rowObj.Label,\n    PeriodFrom: rowObj['Period From'],\n    PeriodTo: rowObj['Period To'],\n    Quantity: parseInt(rowObj.Quantity),\n    ReleaseTitle: rowObj['Release Title'],\n    Revenue: rowObj.Revenue,\n    SuitebeatsComp: rowObj['Suitebeats Comp.'],\n    Territory: rowObj.Territory,\n    TrackTitle: rowObj['Track Title'],\n    UPC: rowObj.UPC\n  }\n}\n\nexport function loadAMPsuite(data: any): AmpSheetRow[] {\n  const workbook = XLSX.read(data, {\n    type: 'binary'\n  });\n  const sheetName = workbook.SheetNames[0]\n  const workSheet = workbook.Sheets[sheetName]\n  const sheetRange = XLSX.utils.decode_range(workSheet['!ref']!)\n  const testJson = XLSX.utils.sheet_to_csv(workSheet, { RS: '\\n'})\n  let startIndex = 0\n  testJson.split('\\n').some((row, index) => {\n    const fullCols = row.split(',').filter((h) => !!h)\n    // the first row with more than 10 cols is hopefully header row\n    if (fullCols.length > 10 && !startIndex) {\n      startIndex = index\n      return\n    }\n  })\n  const asJson = XLSX.utils.sheet_to_json<AmpSheetRaw>(workSheet, { range: { s: { c:0, r:startIndex }, e: sheetRange.e}})\n  return asJson.map(toAmpSheet)\n}\n\nexport function getByIsrc(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('ISRC', data)\n}\n\nexport function getByTerritory(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('Territory', data)\n}\n\nexport function getByArtist(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('Artist', data)\n}\n\nexport function getByRetailer(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('Distributor', data)\n}\n\nexport function getByLocation(data: AmpSheetRow[]) {\n  return getMultiByKeyProp('Territory', data)\n}\n\nexport function getMultiByKeyProp(key: keyof AmpSheetRow, data: AmpSheetRow[]) {\n  const byKeyProp: {[key: string]: AmpSheetRow[]} = {}\n  data.forEach((row) => {\n    !byKeyProp[row[key]] && (byKeyProp[row[key]] = [])\n    byKeyProp[row[key]].push(row)\n  })\n  return byKeyProp\n}\n\nexport function consolidateRvByDate(data: AmpSheetRow[]) {\n  const byDate: { [key: string]: number } = {}\n  data?.forEach((d) => {\n    !byDate[d.PeriodTo] && (byDate[d.PeriodTo] = 0)\n    byDate[d.PeriodTo] += d.Revenue\n  })\n  return byDate\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\n\nexport default function FileSelector({ onLoad }: { onLoad: (data: any) => void }) {\n  function loadFiles(toLoad: any[], loaded: {[key: string]: any} = {}) {\n    if (!toLoad.length) {\n      onLoad(loaded)\n      return\n    }\n    const reader = new FileReader();\n    reader.onload = function(e) {\n      const data = e.target?.result;\n      loaded[toLoad[0].name] = data\n      loadFiles(toLoad.slice(1), loaded)\n    }\n    reader.onerror = function(ex) {\n      console.log(ex);\n    };\n    reader.readAsBinaryString(toLoad[0]);\n  }\n\n  function filesSelected(e: any) {\n    const files = []\n    for (let i=0; i<e.target.files.length; i++) {\n      files.push(e.target.files[i])\n    }\n    loadFiles(files)\n  }\n\n  return <Button\n    variant=\"contained\"\n    component=\"label\"\n  >\n    Upload Files\n    <input\n      type=\"file\"\n      onChange={filesSelected}\n      hidden\n      multiple\n    />\n  </Button>\n}\n","import { DataGrid, GridColDef, GridRowData, GridRowsProp } from '@material-ui/data-grid'\nimport { AmpSheetRow } from '../Types'\nimport { getByIsrc } from './Helpers'\n\nexport default function TrackDetails({ sheet }: { sheet: AmpSheetRow[]}) {\n  const cols: GridColDef[] = [\n    { field: 'title', headerName: 'Title', width: 150 },\n    { field: 'artist', headerName: 'Artist', width: 150 },\n    { field: 'quantity', headerName: 'Quantity', width: 150 },\n    { field: 'revenue', headerName: 'Revenue', width: 150 }\n  ]\n\n  const byIsrc = getByIsrc(sheet)\n  const rows: GridRowsProp = Object.keys(byIsrc).map((isrc, i) => {\n    const data: GridRowData = { id: i }\n    byIsrc[isrc].forEach((track) => {\n      data.title = track.TrackTitle\n      !data.quantity && (data.quantity = 0)\n      data.quantity += track.Quantity\n      !data.revenue && (data.revenue = 0)\n      data.revenue += track.Revenue\n      data.artist = track.Artist\n    })\n    return data\n  })\n\n  return <div style={{ height: 300, width: '100%' }}>\n    <DataGrid rows={rows} columns={cols}></DataGrid>\n  </div>\n}\n","import React from 'react'\nimport { AmpSheetRow } from '../Types'\nimport { Box, MenuItem, Select } from '@material-ui/core'\n\nexport const ALL = 'all'\nconst SERIES_TYPES = ['streams', 'revenue']\n\nexport interface IFilters {\n  artist: string\n  streamOrRevenue: string\n}\n\nexport default function Filters({ sheet, onFiltersChanged }: { sheet: AmpSheetRow[], onFiltersChanged: (filters: IFilters) => void}) {\n  const [currentArtist, setCurrentArtist] = React.useState('')\n  const [currentSeries, setCurrentSeries] = React.useState('')\n  const [allArtists, setAllArtists] = React.useState<string[]>([])\n\n  React.useEffect(() => {\n    const artists: string[] = []\n    sheet.forEach((row) => {\n      if (row.Artist && !artists.includes(row.Artist)) {\n        artists.push(row.Artist)\n      }\n    })\n    setAllArtists(artists)\n    setCurrentArtist(ALL)\n    setCurrentSeries(SERIES_TYPES[0])\n  }, [sheet])\n\n  React.useEffect(() => {\n    onFiltersChanged({ artist: currentArtist, streamOrRevenue: currentSeries})\n  }, [currentSeries, currentArtist, onFiltersChanged])\n\n  return <Box>\n    <Select\n      value={currentArtist}\n      onChange={(e) => setCurrentArtist(e.target.value as string)}\n      style={{padding: 6, margin: 6}}\n    >\n      <MenuItem value={ALL}>All</MenuItem>\n      {allArtists.map((a) => <MenuItem key={a} value={a}>{a}</MenuItem>)}\n    </Select>\n    <Select\n      value={currentSeries}\n      onChange={(e) => setCurrentSeries(e.target.value as string)}\n      style={{padding: 6, margin: 6}}\n    >\n      {SERIES_TYPES.map((series) => {\n        return <MenuItem key={series} value={series}>{series}</MenuItem>\n      })}\n    </Select>\n  </Box>\n}","import React from 'react'\nimport ReactApexChart from 'react-apexcharts'\nimport { AmpSheetRow } from '../Types'\nimport { getByRetailer } from './Helpers'\nimport { ApexOptions } from 'apexcharts'\nimport { Box } from '@material-ui/core'\nimport Filters, { ALL, IFilters } from './Filters'\n\nexport default function Retailers({ sheet }: { sheet: AmpSheetRow[] }) {\n  const [byRetailer, setByRetailer] = React.useState<{[retailer: string]: AmpSheetRow[]}>({})\n  const [currentSeries, setSeries] = React.useState<{ data: number[] }[]>([])\n  const [currentCategories, setCategories] = React.useState<string[]>([])\n  const [currentArtist, setCurrentArtist] = React.useState('')\n  const [availableSeries, setAvailableSeries] = React.useState<{[label: string]: number[]}>({})\n  const [selectedSeries, setSelectedSeries] = React.useState('')\n\n  React.useEffect(() => {\n    const byRetailer = getByRetailer(sheet)\n    const categories: string[] = []\n    Object.keys(byRetailer).forEach((retailer) => {\n      categories.push(retailer)\n    })\n    setByRetailer(byRetailer)\n    setCategories(categories)\n  }, [sheet])\n\n  React.useEffect(() => {\n    const revenue: number[] = []\n    const streams: number[] = []\n    Object.keys(byRetailer).forEach((retailer) => {\n      let revTotal = 0\n      let streamTotal = 0\n      byRetailer[retailer].forEach((track) => {\n        if (currentArtist === ALL || currentArtist === track.Artist) {\n          revTotal += track.Revenue\n          streamTotal += track.Quantity\n        }\n      })\n      revenue.push(revTotal)\n      streams.push(streamTotal)\n    })\n    setAvailableSeries({ revenue, streams })\n    setSeries([{ data: streams }])\n  }, [currentArtist, byRetailer])\n\n  React.useEffect(() => {\n    if (availableSeries[selectedSeries]) {\n      setSeries([{data: availableSeries[selectedSeries]}])\n    }\n  }, [selectedSeries, availableSeries])\n\n  function onFilterChange({ artist, streamOrRevenue }: IFilters) {\n    setCurrentArtist(artist)\n    setSelectedSeries(streamOrRevenue)\n  }\n\n  const options: ApexOptions = {\n    chart: {\n      type: 'bar',\n      height: 350\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 4,\n        horizontal: true,\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    xaxis: {\n      categories: currentCategories,\n    }\n  }\n  return <Box>\n    <Filters sheet={sheet} onFiltersChanged={onFilterChange} />\n    <ReactApexChart options={options} series={currentSeries} type=\"bar\" height={350} />\n  </Box>\n}\n","import React from 'react'\nimport { AmpSheetRow } from '../Types'\nimport { getByLocation } from './Helpers'\nimport { ApexOptions } from 'apexcharts'\nimport ReactApexChart from 'react-apexcharts'\nimport { Box } from '@material-ui/core'\nimport Filters, { ALL, IFilters } from './Filters'\n\nexport default function Locations({ sheet }: { sheet: AmpSheetRow[] }) {\n  const [byLocation, setByLocation] = React.useState<{ [location: string]: AmpSheetRow[]}>({})\n  const [locations, setLocations] = React.useState<string[]>([])\n  const [currentArtist, setCurrentArtist] = React.useState('')\n  const [selectedSeries, setSelectedSeries] = React.useState('')\n  const [data, setData] = React.useState<number[]>([])\n  const [availableSeries, setAvailableSeries] = React.useState<{[label: string]: number[]}>({})\n\n  React.useEffect(() => {\n    const byLocation = getByLocation(sheet)\n    setLocations(Object.keys(byLocation))\n    setByLocation(byLocation)\n  }, [sheet])\n\n  React.useEffect(() => {\n    const revenue: number[] = []\n    const streams: number[] = []\n    Object.keys(byLocation).forEach((retailer) => {\n      let revTotal = 0\n      let streamTotal = 0\n      byLocation[retailer].forEach((track) => {\n        if (currentArtist === ALL || currentArtist === track.Artist) {\n          revTotal += track.Revenue\n          streamTotal += track.Quantity\n        }\n      })\n      revenue.push(revTotal)\n      streams.push(streamTotal)\n    })\n    setAvailableSeries({ revenue, streams })\n  }, [currentArtist, byLocation])\n\n  React.useEffect(() => {\n    if (availableSeries[selectedSeries]) {\n      setData([...availableSeries[selectedSeries]])\n    }\n  }, [selectedSeries, availableSeries])\n\n  function onFilterChange({ artist, streamOrRevenue }: IFilters) {\n    setCurrentArtist(artist)\n    setSelectedSeries(streamOrRevenue)\n  }\n\n  const options = (): ApexOptions => ({\n    chart: {\n      type: 'donut',\n    },\n    labels: locations,\n    responsive: [{\n      breakpoint: 480,\n      options: {\n        chart: {\n          width: 200\n        },\n        legend: {\n          position: 'bottom'\n        }\n      }\n    }]\n  })\n\n  return <Box>\n    <Filters sheet={sheet} onFiltersChanged={onFilterChange} />\n    <ReactApexChart options={options()} series={data} type=\"donut\" height={350 + Math.floor(Math.random() * 2) + 1} />\n  </Box>\n}\n","import React from 'react';\nimport { AmpSheetRow } from '../Types'\nimport { loadAMPsuite } from './Helpers'\nimport FileSelector from './FileSelector'\nimport TrackDetails from './TrackDetails'\nimport Retailers from './Retailers'\nimport Locations from './Locations'\n\nexport default function Home() {\n  const [sheet, setSheet] = React.useState<AmpSheetRow[]>([])\n\n  function fileSelected(data: any) {\n    const rows: AmpSheetRow[] = []\n    Object.values(data).forEach((sheetData) => {\n      rows.push(...loadAMPsuite(sheetData))\n    })\n    setSheet(rows)\n  }\n\n  return <div style={{ padding: 25 }}>\n    <div style={{ padding: 25 }}>\n      <FileSelector onLoad={fileSelected} />\n    </div>\n    {!!sheet.length && <div style={{ padding: 25, border: 'solid 1px' }}>\n      Tracks\n      <div style={{ padding: 25 }}>\n        <TrackDetails sheet={sheet} />\n      </div>\n      Retailers\n      <div style={{ padding: 25 }}>\n        <Retailers sheet={sheet} />\n      </div>\n      Locations\n      <div style={{ padding: 25 }}>\n        <Locations sheet={sheet} />\n      </div>\n    </div>\n    }\n  </div>\n}\n","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}